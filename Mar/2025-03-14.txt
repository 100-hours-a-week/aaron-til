# TIL Template

## 날짜: 2025-03-14

### 스크럼
- 학습 목표 1 : 프로젝트 개발 세팅 완료
- 학습 목표 2 : 코테 1문제

### 새로 배운 내용
#### 주제 1: Git 브랜치 병합 문제 해결 사례
- 상세 내용 

**초기 상황**
A 브랜치와 B 브랜치를 병합하여 새로운 C 브랜치를 만들고자 했습니다. 처음에는 A, B 브랜치를 C로 병합하려 했으나, 이 과정에서 여러 문제가 발생했습니다.

**문제 1: 오래된 기준 커밋**
첫 번째 문제는 C 브랜치가 오래된 커밋을 기준으로 생성되었기 때문에 발생했습니다. 이는 C 브랜치가 main 브랜치에 추가된 최근 변경사항들을 포함하지 않고 있었다는 의미입니다. 이로 인해 A, B 브랜치를 Merge하려 할 때 충돌이 발생했습니다.

**해결 방법**
이 문제를 해결하기 위해, C 브랜치에서 git pull origin main 명령을 실행하여 main 브랜치의 최신 변경사항을 가져왔습니다. 이렇게 함으로써 병합을 다시 시도하기 전에 C 브랜치를 프로젝트의 현재 상태와 동기화할 수 있었습니다.

**문제 2: 운영체제 간 파일명 호환성**
오래된 브랜치 문제를 해결한 후, 다시 A, B를 Merge하고 Push하려고 할 때 특정 파일의 동기화가 이뤄지지 않아 새로운 파일을 pull하는 과정에서 새로운 문제가 발생했습니다. 이는 더 복잡한 문제였는데, 다른 운영체제 간의 파일명 공백 포함/불포함 차이와 관련된 문제였습니다. C 브랜치의 파일 중 하나의 이름에 Mac에서는 보이지 않는 공백이 Windows에서는 확인이 되었었습니다.

macOS에서: 공백이 포함된 파일명이 정상적으로 인식됨
Windows에서: 같은 파일명이 특수 문자를 포함한 것으로 해석되어 pull이 불가능함

**해결 방법**
C 브랜치에서 문제가 되는 파일의 이름의 공백을 제거하고 성공적으로 pull 했습니다. 이 변경사항을 커밋한 후, 두 브랜치를 merge 했던 내용을 정상적으로 pull 할 수 있었습니다.

**최종 결과**
두 가지 문제를 모두 해결한 후, 병합 과정을 성공적으로 완료했습니다. 이제 C 브랜치는 A와 B 브랜치의 모든 변경사항을 올바르게 포함하고 있으며, dev 브랜치에 PR한 후 정상 배포되는 것을 확인했습니다. 

이 경험은 협업과정에서 팀원간 브랜치 전략을 설정하고 병합하는 과정에 대한 깊은 이해에 도움이 되었습니다. 또, 서로 다른 운영체제를 사용하는 팀에서 파일명에서 차이가 발생할 수 있다는 부분을 알게되었습니다. 

### 오늘의 회고
- Git은 늘 무서웠는데 동료랑 같이 하나씩 해결해나가니까 재미있었다.

### 참고 자료 및 링크
- [링크 제목](URL)https://www.acmicpc.net/problem/9536
- [링크 제목](URL)https://www.acmicpc.net/problem/28278
- [링크 제목](URL)https://www.acmicpc.net/problem/31403

